# Load necessary libraries
library(tidymodels)
library(ggplot2)
# Load the Iris dataset
data(iris)
#exploration of data
head(iris)
str(iris)
summary(iris)
# Split the data into training and testing sets
set.seed(123)
iris_split <- initial_split(iris, prop = 0.7, strata = Species)
iris_train <- training(iris_split)
iris_test <- testing(iris_split)
# Create a recipe for preprocessing
iris_recipe <-
recipe(Species ~ ., data = iris_train)
# Create an SVM model specification
svm_spec <-
svm_poly(
cost = tune(),
degree = tune(),
scale_factor = tune()
) %>%
set_engine("kernlab") %>%
set_mode("classification")
# Create a workflow
svm_workflow <-
workflow() %>%
add_recipe(iris_recipe) %>%
add_model(svm_spec)
# Define a grid of hyperparameters to tune
svm_grid <- expand.grid(
cost = 10^(-3:3),
degree = 2:4,
scale_factor = 10^(-3:3)
)
# Perform hyperparameter tuning with cross-validation
svm_tune <- tune_grid(
svm_workflow,
resamples = vfold_cv(iris_train, v = 5),
grid = svm_grid
)
# Select the best model based on accuracy
best_svm <- select_best(svm_tune, metric = "accuracy")
# Finalize the workflow with the best model
final_svm <- finalize_workflow(svm_workflow, best_svm)
autoplot(svm_tune)
# Fit the final model to the training data
final_fit <- fit(final_svm, data = iris_train)
# Make predictions on the test set
predictions <- predict(final_fit, new_data = iris_test)
# Evaluate the model performance
metrics <- metric_set(accuracy, kap, sensitivity, specificity)
results <- predictions %>%
bind_cols(iris_test) %>%
metrics(truth = Species, estimate = .pred_class)
print(results)
# Visualize Petal Length vs Petal Width with predicted classes
predictions %>%
bind_cols(iris_test) %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, color = .pred_class)) +
geom_point() +
labs(title = "Petal Length vs Petal Width (Predicted Classes)",
x = "Petal Length",
y = "Petal Width",
color = "Predicted Species") +
theme_minimal()
# Evaluate the model performance
conf_mat <- predictions %>%
bind_cols(iris_test) %>%
conf_mat(truth = Species, estimate = .pred_class)
# Print the confusion matrix
conf_mat
# Visualize the confusion matrix
autoplot(conf_mat, type = "heatmap")
predictions %>% bind_cols(iris_test) %>% metrics(truth = Species, estimate = .pred_class)
q()
q()
q()
